name: Continuous Integration

# Run this workflow every time a new commit pushed to your repository
on: [push, pull_request]

env:
  DEPS_DIR: ${{ github.workspace}}/deps
  HUNTER_ROOT: ${{ github.workspace}}/hunter

jobs:
  # clang-format:
    # name: clang-format-8
    # runs-on: ubuntu-20.04
    # steps:
      # - name: Checkout code
        # uses: actions/checkout@v2
      # - name: Install clang-format
        # run: sudo apt-get install clang-format-8
      # - name: clang-format
        # run: "./ci/run-clang-format.py -r --clang-format-executable clang-format-8
      # --color always ./lib/ ./projects/ ./examples/"
  clang-tidy:
    name: clang-tidy-8 ${{ matrix.name }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - name: without projects
            paths: "'^((?!snippets|/test/|/test_utils/|/projects/).)*$'"
          - name: only projects
            paths: "'^.*projects/((?!snippets|/test/|/test_utils/).)*$'"
    env:
      COMPILER: "clang++-8"
      BUILD_TYPE: "DEBUG"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install clang-format
        run: sudo apt-get install clang-tidy-8 g++-8
      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: "${{ env.DEPS_DIR }} ${{ env.HUNTER_ROOT }}"
          key:  ${{ runner.os }}-${{ env.COMPILER }}-${{ env.BUILD_TYPE }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ env.COMPILER }}-${{ env.BUILD_TYPE }}-
            ${{ runner.os }}-${{ env.COMPILER }}-
      - name: build_dependencies
        run: "./ci/build_dependencies.sh"
      - name: clang-tidy
        run: "./ci/run_clang_tidy.sh ${{ matrix.paths}}"
      
  # windows-debug:
    # # Name the Job
    # name: Windows Debug x64
    # # Set the type of machine to run on
    # runs-on: windows-latest

    # steps:
      # # Checks out a copy of your repository on the ubuntu-latest machine
      # - name: Checkout code
        # uses: actions/checkout@v2
      
      # # Restore cache:
      # - name: Restore cache
        # uses: actions/cache@v2
        # with:
          # path: C:\.hunter
          # key:  ${{ runner.os }}-hunter-debug-${{ github.run_id }}
          # restore-keys: |
            # ${{ runner.os }}-hunter-debug-
            # ${{ runner.os }}-hunter-
      
      # # Note that windows has a recent version of cmake installed -> we don't need to install it here.
      
      # # we set CMAKE_CXX_FLAGS_DEBUG explictly to avoid the creation of pdb files (which fill up disk space)
      # - name: Hunter dependencies
        # run: |
          # mkdir build > $null
          # cd build
          # cmake -A x64 -D HUNTER_CONFIGURATION_TYPES=Debug -D CMAKE_CXX_FLAGS_DEBUG="/MDd /Ob0 /Od /RTC1" ..
          
      # - name: compile
        # run: |
          # cmake --build ./build --config Debug --target ALL_BUILD
          
      # - name: test
        # run: |
          # cd build
          # ctest -j 2 -c Debug --output-on-failure
          
    
  # windows-release:
    # # Name the Job
    # name: Windows Release x64
    # # Set the type of machine to run on
    # runs-on: windows-latest
 
    # steps:
      # # Checks out a copy of your repository on the ubuntu-latest machine
      # - name: Checkout code
        # uses: actions/checkout@v2
      
      # # Restore cache:
      # - name: Restore cache
        # uses: actions/cache@v2
        # with:
          # path: C:\.hunter
          # key:  ${{ runner.os }}-hunter-release-${{ github.run_id }}
          # restore-keys: |
            # ${{ runner.os }}-hunter-release-
            # ${{ runner.os }}-hunter-
      
      # # Note that windows has a recent version of cmake installed -> we don't need to install it here.
      
      # - name: Hunter dependencies
        # run: |
          # mkdir build > $null
          # cd build
          # cmake -A x64 -D HUNTER_CONFIGURATION_TYPES=Release ..
          
      # - name: compile
        # run: cmake --build ./build --config Release --target ALL_BUILD
          
      # - name: test
        # run: |
          # cd build
          # ctest -j 2 -c Release --output-on-failure
